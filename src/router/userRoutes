const express = require("express");
const router = express.Router();
const multer = require("multer");
const csv = require("csv-parser");
const fs = require("fs");
const path = require("path");
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();
// Configurar multer (archivos temporales en /uploads)
const upload = multer({ dest: "uploads/" });

// FunciÃ³n para normalizar roles
function normalizeRole(role) {
  if (!role) return "PACIENTE"; // default

  const r = role.toString().trim().toLowerCase();

  if (r.includes("admin")) return "ADMINISTRADOR";
  if (r.includes("medic")) return "MEDICO";
  if (r.includes("enfermer")) return "ENFERMERO";
  if (r.includes("pacient")) return "PACIENTE";

  // fallback role
  return "PACIENTE";
}

// Endpoint para cargue masivo de usuarios
// El archivo CSV debe tener las columnas: 
// email, fullname, role, current_password, status, specialization, department, license_number, phone, date_of_birth
router.post("/upload-users", upload.single("file"), async (req, res) => {
  const filePath = path.join(__dirname, "../", req.file.path);
  const results = [];

  try {
    fs.createReadStream(filePath)
      .pipe(csv())
      .on("data", (data) => results.push(data))
      .on("end", async () => {
        try {
          // Crear usuarios con Prisma
          for (const user of results) {
            await prisma.users.create({
              data: {
                email: user.email,
                fullname: user.fullname,
                role: normalizeRole(user.role),
                current_password: user.current_password,
                status: user.status || "PENDING",
                specialization: user.specialization || null,
                department: user.department || null,
                license_number: user.license_number || null,
                phone: user.phone || null,
                date_of_birth: user.date_of_birth
                  ? new Date(user.date_of_birth)
                  : null,
              },
            });
          }

          fs.unlinkSync(filePath); // eliminar el archivo temporal
          res.json({
            message: "Usuarios cargados correctamente",
            count: results.length,
          });
        } catch (err) {
          console.error(err);
          res.status(500).json({ message: "Error al guardar los usuarios" });
        }
      });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Error al procesar el archivo" });
  }
});

module.exports = router;

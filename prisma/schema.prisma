// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  email               String    @unique
  current_password    String
  fullname            String
  role                Role      @default(PACIENTE)
  status              UserStatus @default(PENDING) // PENDING, ACTIVE, INACTIVE
  specialization      String? // only for doctors
  verificationCode    String?
  verificationExpires DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  patient             Patient?  
  diagnosticsCreated  Diagnostic[]     @relation("DoctorDiagnostics")
}

model Patient {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId @unique
  documentNumber  String   @unique
  birthDate       DateTime
  age             Int
  gender          String
  phoneNumber     String?
  address         String?
  state           State    @default(ACTIVE) // ACTIVE, INACTIVE
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  diagnostics     Diagnostic[]
}

model Diagnostic {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId           String    @db.ObjectId
  doctorId            String    @db.ObjectId
  title               String
  description         String
  symptoms            String
  diagnosis           String
  treatment           String
  observations        String?
  diagnosisDate       DateTime  @default(now())
  nextAppointment     DateTime?
  state               DiagnosticState @default(ACTIVE) // ACTIVE, INACTIVE, DELETED
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relaciones
  patient             Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor              Users     @relation("DoctorDiagnostics", fields: [doctorId], references: [id])
  documents           DiagnosticDocument[]
  @@index([patientId])
  @@index([doctorId])
}

model DiagnosticDocument {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  diagnosticId  String   @db.ObjectId
  filename      String // original name of the file
  storedfilename String // unique name to avoid conflicts
  filepath    String  // path where the file is stored
  fileType     String // e.g., pdf, png, jpg
  mimeType     String // e.g., application/pdf, image/png
  fileSize     Int // in bytes
  description  String? // optional description of the document
  uploadedBy   String   @db.ObjectId
  uploadedAt   DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relaciones
  diagnostic   Diagnostic @relation(fields: [diagnosticId], references: [id], onDelete: Cascade)

  @@index([diagnosticId])
}

enum Role {
  ENFERMERO
  MEDICO
  ADMINISTRADOR
  PACIENTE
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum State {
  ACTIVE
  INACTIVE
}

enum DiagnosticState {
  ACTIVE
  INACTIVE
  DELETED
}


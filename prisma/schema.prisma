// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  email               String    @unique
  fullname            String
  identification      String?   @unique
  role                Role      @default(PACIENTE)
  current_password    String
  status              String    @default("PENDING") // PENDING, ACTIVE, INACTIVE
  specialization      String?
  department          String?
  license_number      String?
  phone               String?
  date_of_birth       DateTime?
  verificationCode    String?
  verificationExpires DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relaciones
  patientAppointments Appointments[]   @relation("PatientAppointments")
  doctorAppointments  Appointments[]   @relation("DoctorAppointments")
  createdRecords      MedicalRecords[] @relation("RecordCreator")
  MedicalRecords      MedicalRecords[]
}
  // Un usuario puede tener muchas citas, tanto como paciente como doctor
model Appointments {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  date   DateTime
  reason String?
  notes  String?

  // Relaciones
  patientId String  @db.ObjectId
  doctorId  String? @db.ObjectId

  patient Users  @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Users? @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: SetNull)
}

model MedicalRecords {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdAt   DateTime @default(now())

  // Relaciones
  patientId   String  @db.ObjectId
  createdById String? @db.ObjectId

  patient   Users  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdBy Users? @relation("RecordCreator", fields: [createdById], references: [id], onDelete: SetNull)
}

enum Role {
  ENFERMERO
  MEDICO
  ADMINISTRADOR
  PACIENTE
}
